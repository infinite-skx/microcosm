#!/usr/bin/env node

'use strict'

const rollup = require('rollup')
const flow = require('rollup-plugin-flow')
const unassert = require('rollup-plugin-unassert')
const buble = require('rollup-plugin-buble')
const uglify = require('rollup-plugin-uglify').uglify
const node = require('rollup-plugin-node-resolve')
const filesize = require('rollup-plugin-filesize')

const path = require('path')
const minimist = require('minimist')

const options = {
  strict: false,
  minify: false,
  format: 'cjs',
  out: 'build'
}

Object.assign(options, minimist(process.argv.slice(2)))

const plugins = [
  flow(),
  buble(),
  node({
    preferBuiltins: true
  }),
  filesize()
]

if (options.minify) {
  plugins.push(
    uglify({
      compress: {
        passes: 3,
        drop_console: true,
        keep_infinity: true,
        toplevel: true,
        warnings: true
      },
      mangle: {
        toplevel: true,
        properties: {
          regex: /^_/,
          reserved: ['__esModule', '__MICROCOSM_DEVTOOLS_GLOBAL_HOOK__', '__MICROCOSM_SCHEDULER__']
        },
      },
      nameCache: {},
      warnings: true
    })
  )
}

const configs = {
  Microcosm: path.resolve('src/index.js')
}

if (!options.strict) {
  plugins.push(unassert())
}

const external = ['react', 'react-dom', 'assert']

const globals = {
  react: 'React',
  'react-dom': 'ReactDOM'
}

Object.keys(configs).forEach(key => {
  var entry = configs[key]

  globals[entry] = key
  external.push(entry)
})

for (let name in configs) {
  let input = configs[name]
  let file = input.replace('src', options.out)

  let bundler = rollup.rollup({
    input: input,
    plugins: plugins,
    external: external.filter(path => path !== input),
    onwarn: function(error) {
      // Do not raise warnings for named exports
      if (error.code !== 'MIXED_EXPORTS') {
        console.warn('%s: %s', name, error)
      }
    }
  })

  let write = bundler.then(bundle => {
    return bundle.write({
      globals: globals,
      file: file,
      format: options.format,
      name: name,
      sourcemap: true
    })
  })

  write.catch(error => console.error(error))
}
